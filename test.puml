@startuml
hide members
interface com.codelogium.ticketing.repository.RoomDetailsRepository {
}
interface com.codelogium.ticketing.service.CommentService {
~ Comment createComment(Long,Long,Comment)
~ Comment updateComment(Long,Long,Long,Comment)
~ Comment retrieveComment(Long,Long,Long)
~ void removeComment(Long,Long,Long)
~ List<AuditLog> retrieveAuditLogs(Long,Long,Long)
}

enum com.codelogium.ticketing.entity.enums.Priority {
+  LOW
+  MEDIUM
+  HIGH
}

class com.codelogium.ticketing.service.UserRoomServiceImp {
- UserRoomRepository userRoomRepository
+ List<Room> retrieveRooms(Long)
}


class com.codelogium.ticketing.dto.UserDTO {
- Long id
- String username
- String email
- String password
- UserRole role
- List<TicketDTO> tickets
- List<CommentDTO> comments
- List<UserRoomDTO> memberships
+ User toEntity()
+ Long getId()
+ void setId(Long)
+ String getUsername()
+ void setUsername(String)
+ String getEmail()
+ void setEmail(String)
+ UserRole getRole()
+ void setRole(UserRole)
+ List<TicketDTO> getTickets()
+ void setTickets(List<TicketDTO>)
+ List<CommentDTO> getComments()
+ void setComments(List<CommentDTO>)
+ List<UserRoomDTO> getMemberships()
+ void setMemberships(List<UserRoomDTO>)
+ String getPassword()
+ void setPassword(String)
}


class com.codelogium.ticketing.dto.UserRegistrationRequest {
- User user
- String inviteCode
+ User getUser()
+ void setUser(User)
+ String getInviteCode()
+ void setInviteCode(String)
}


interface com.codelogium.ticketing.repository.TicketRoomRepository {
}
class com.codelogium.ticketing.exception.ResourceNotFoundException {
}
class com.codelogium.ticketing.web.UserWebController {
- UserService userService
+ String showWelcomePage(Model,Authentication,HttpServletRequest)
+ String registerForm(Model)
+ String registerUser(UserDTO,String,RedirectAttributes)
+ String showLoginForm()
}


interface com.codelogium.ticketing.repository.RoomRepository {
~ List<Room> findAllByRoomNumberIn(List<String>)
~ Optional<Room> findByInviteCode(String)
}

interface com.codelogium.ticketing.repository.UserRoomRepository {
~ List<Room> findRoomsByUserId(Long)
}

class com.codelogium.ticketing.service.AuthService {
- {static} Logger log
- WebClient webClient
- {static} String REGISTER_URI
- {static} String AUTHENTICATE_URI
+ Optional<String> registerUser(UserRegistrationRequest)
+ Optional<AuthResponse> authenticate(LoginRequest)
}


class com.codelogium.ticketing.util.EntityUtils {
+ {static} void updateIfNotNull(Consumer<T>,T)
}

class com.codelogium.ticketing.security.filter.ExceptionHandlerFilter {
# void doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)
+ {static} void sendErrorResponse(HttpServletResponse,int,String)
}

class com.codelogium.ticketing.entity.Room {
- Long id
- Set<UserRoom> memberships
- String roomNumber
- String inviteCode
- Set<TicketRoom> ticketAssociations
- RoomDetails roomDetails
# void onCreate()
- String generateInviteCode(String)
- {static} String bytesToHex(byte[])
+ Long getId()
+ void setId(Long)
+ Set<UserRoom> getMemberships()
+ void setMemberships(Set<UserRoom>)
+ String getRoomNumber()
+ void setRoomNumber(String)
+ String getInviteCode()
+ void setInviteCode(String)
+ Set<TicketRoom> getTicketAssociations()
+ void setTicketAssociations(Set<TicketRoom>)
+ RoomDetails getRoomDetails()
+ void setRoomDetails(RoomDetails)
}


class com.codelogium.ticketing.mapper.TicketMapper {
+ TicketDTO toDto(Ticket)
- UserDTO mapUserToSimpleDto(User)
- CommentDTO mapCommentToDto(Comment)
- TicketRoomDTO mapTicketRoomToDto(TicketRoom)
- RoomDTO mapRoomToSimpleDto(Room)
}

class com.codelogium.ticketing.web.TicketWebController {
- TicketService ticketService
- TicketMapper ticketMapper
- UserService userService
- UserRoomService userRoomService
+ String showTicketsList(Model,Authentication,HttpServletRequest)
+ String showCreateTicketForm(Model,Authentication,HttpServletRequest)
+ String createTicket(TicketCreationRequest,Authentication,RedirectAttributes,HttpServletRequest)
+ String deleteTicket(Long,RedirectAttributes,HttpServletRequest)
+ String showTicketDetails(Long,Model,Authentication,HttpServletRequest)
+ String acknowledgeTicket(Model,Long,RedirectAttributes,HttpServletRequest)
+ String solveTicket(Model,Long,RedirectAttributes,HttpServletRequest)
+ String showAllTicketsList(Model,Authentication,HttpServletRequest)
+ String showTicketsInProgressList(Model,Authentication,HttpServletRequest)
}


interface com.codelogium.ticketing.service.FileStorageService {
~ String uploadImageFromBase64(String)
}

interface com.codelogium.ticketing.repository.AuditLogRepository {
~ List<AuditLog> findByTicketId(Long)
~ List<AuditLog> findByCommentId(Long)
}

class com.codelogium.ticketing.security.SecurityConfig {
~ CustomAuthenticationManager customAuthenticationManager
+ BCryptPasswordEncoder passwordEncoder()
+ SecurityFilterChain filterChain(HttpSecurity)
}


class com.codelogium.ticketing.entity.User {
- Long id
- String username
- String password
- String email
- UserRole role
- List<Ticket> tickets
- List<Comment> comments
- Set<UserRoom> memberships
+ Long getId()
+ void setId(Long)
+ String getUsername()
+ void setUsername(String)
+ String getPassword()
+ void setPassword(String)
+ String getEmail()
+ void setEmail(String)
+ UserRole getRole()
+ void setRole(UserRole)
+ List<Ticket> getTickets()
+ void setTickets(List<Ticket>)
+ List<Comment> getComments()
+ void setComments(List<Comment>)
+ Set<UserRoom> getMemberships()
+ void setMemberships(Set<UserRoom>)
}


class com.codelogium.ticketing.mapper.UserMapper {
+ UserDTO toDTO(User)
- UserRoomDTO toUserRoomDto(UserRoom)
- RoomDTO toRoomDto(Room)
}

interface com.codelogium.ticketing.repository.UserRepository {
~ Optional<User> findByUsername(String)
}

class com.codelogium.ticketing.ApplicationExceptionHandler {
+ ResponseEntity<Object> handleResourceNotFoundException(ResourceNotFoundException)
# ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException,HttpHeaders,HttpStatusCode,WebRequest)
}

class com.codelogium.ticketing.entity.TicketRoom {
- Long id
- Ticket ticket
- Room room
+ Long getId()
+ void setId(Long)
+ Ticket getTicket()
+ void setTicket(Ticket)
+ Room getRoom()
+ void setRoom(Room)
}


class com.codelogium.ticketing.security.handler.CustomAuthenticationEntryPoint {
+ void commence(HttpServletRequest,HttpServletResponse,AuthenticationException)
}

class com.codelogium.ticketing.dto.TicketRoomDTO {
- Long id
- RoomDTO room
+ Long getId()
+ void setId(Long)
+ RoomDTO getRoom()
+ void setRoom(RoomDTO)
}


interface com.codelogium.ticketing.repository.CommentRepository {
~ Optional<Comment> findByIdAndTicketIdAndAuthorId(Long,Long,Long)
}

class com.codelogium.ticketing.dto.TicketInfoUpdateDTO {
- String title
- String description
- Instant creationDate
- Category category
- Priority priority
+ String getTitle()
+ void setTitle(String)
+ String getDescription()
+ void setDescription(String)
+ Instant getCreationDate()
+ void setCreationDate(Instant)
+ Category getCategory()
+ void setCategory(Category)
+ Priority getPriority()
+ void setPriority(Priority)
}


class com.codelogium.ticketing.dto.CommentDTO {
- Long id
- String content
- String createdAt
- UserDTO creator
+ Long getId()
+ void setId(Long)
+ String getContent()
+ void setContent(String)
+ String getCreatedAt()
+ void setCreatedAt(String)
+ UserDTO getCreator()
+ void setCreator(UserDTO)
}


interface com.codelogium.ticketing.service.TicketService {
~ Ticket createTicket(Long,TicketCreationRequest)
~ Ticket updateTicketInfo(Long,Long,TicketInfoUpdateDTO)
~ Ticket updateTicketStatus(Long,Long,TicketStatusUpdateDTO)
~ Ticket retrieveTicket(Long,Long)
~ List<Ticket> retrieveALLTicket()
~ List<Ticket> retrieveTicketInProgress()
~ void removeTicket(Long,Long)
~ List<Ticket> retrieveTicketsByCreator(Long)
~ Ticket searchTicket(Long,Long,Status)
~ List<AuditLog> retrieveAuditLogs(Long,Long)
~ void acknowledgeTicket(Long,Long)
~ void solveTicket(Long,Long)
}

enum com.codelogium.ticketing.entity.enums.UserRole {
+  RENTER
+  STAFF
+  MECHANIC
}

class com.codelogium.ticketing.entity.RoomDetails {
- Long id
- Room room
- String floor
- String responsibleManager
- Instant lastInspectionDate
+ Long getId()
+ void setId(Long)
+ Room getRoom()
+ void setRoom(Room)
+ String getFloor()
+ void setFloor(String)
+ String getResponsibleManager()
+ void setResponsibleManager(String)
+ Instant getLastInspectionDate()
+ void setLastInspectionDate(Instant)
}


class com.codelogium.ticketing.dto.TicketCreationRequest {
- String title
- String description
- String imageUrl
- Category category
- Priority priority
- Status status
- List<String> roomNumbers
+ String getTitle()
+ void setTitle(String)
+ String getDescription()
+ void setDescription(String)
+ String getImageUrl()
+ void setImageUrl(String)
+ Category getCategory()
+ void setCategory(Category)
+ Priority getPriority()
+ void setPriority(Priority)
+ Status getStatus()
+ void setStatus(Status)
+ List<String> getRoomNumbers()
+ void setRoomNumbers(List<String>)
}


class com.codelogium.ticketing.security.SecurityConstants {
+ {static} String SECRET_KEY
+ {static} int TOKEN_EXPIRATION
+ {static} String BEARER
+ {static} String AUTHORIZATION
+ {static} String REGISTER_PATH
}

class com.codelogium.ticketing.dto.RoomDTO {
- Long id
- String roomNumber
+ Long getId()
+ void setId(Long)
+ String getRoomNumber()
+ void setRoomNumber(String)
}


class com.codelogium.ticketing.dto.TicketStatusUpdateDTO {
- Status status
+ Status getStatus()
+ void setStatus(Status)
}


class com.codelogium.ticketing.service.TicketServiceImp {
- TicketRepository ticketRepository
- UserRepository userRepository
- AuditLogRepository auditLogRepository
- RoomRepository roomRepository
- TicketRoomRepository ticketRoomRepository
- FileStorageService fileStorageService
+ Ticket createTicket(Long,TicketCreationRequest)
+ Ticket updateTicketInfo(Long,Long,TicketInfoUpdateDTO)
+ Ticket updateTicketStatus(Long,Long,TicketStatusUpdateDTO)
- void linkTicketToRooms(Ticket,List<String>)
+ Ticket retrieveTicket(Long,Long)
+ List<Ticket> retrieveTicketsByCreator(Long)
+ Ticket searchTicket(Long,Long,Status)
+ List<AuditLog> retrieveAuditLogs(Long,Long)
+ void removeTicket(Long,Long)
- void validateUser(Long)
- boolean isStatusChanged(Status,Status)
+ {static} Ticket unwrapTicket(Long,Optional<Ticket>)
+ void acknowledgeTicket(Long,Long)
+ void solveTicket(Long,Long)
+ List<Ticket> retrieveALLTicket()
+ List<Ticket> retrieveTicketInProgress()
}


class com.codelogium.ticketing.security.rbac.CustomUserDetailsImp {
- User user
+ Collection<? extends GrantedAuthority> getAuthorities()
+ String getPassword()
+ String getUsername()
+ boolean isAccountNonExpired()
+ boolean isAccountNonLocked()
+ boolean isCredentialsNonExpired()
+ boolean isEnabled()
}


class com.codelogium.ticketing.security.filter.JWTAuthorizationFilter {
# void doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)
}

class com.codelogium.ticketing.security.filter.AuthenticationFilter {
- CustomAuthenticationManager customAuthenticationManager
- ObjectMapper objectMapper
+ Authentication attemptAuthentication(HttpServletRequest,HttpServletResponse)
# void unsuccessfulAuthentication(HttpServletRequest,HttpServletResponse,AuthenticationException)
# void successfulAuthentication(HttpServletRequest,HttpServletResponse,FilterChain,Authentication)
}


class com.codelogium.ticketing.entity.UserRoom {
- Long id
- User user
- Room room
- LocalDateTime joinedAt
+ Long getId()
+ void setId(Long)
+ User getUser()
+ void setUser(User)
+ Room getRoom()
+ void setRoom(Room)
+ LocalDateTime getJoinedAt()
+ void setJoinedAt(LocalDateTime)
}


class com.codelogium.ticketing.api.UserController {
- UserService userService
- UserMapper userMapper
+ ResponseEntity<String> registerUser(UserRegistrationRequest)
+ ResponseEntity<UserDTO> retrieveUser(Long)
+ ResponseEntity<Void> removeUser(Long)
}


class com.codelogium.ticketing.entity.AuditLog {
- Long id
- Long ticketId
- Long commentId
- Long userId
- String action
- String oldValue
- String newValue
- Instant timestamp
+ Long getId()
+ void setId(Long)
+ Long getTicketId()
+ void setTicketId(Long)
+ Long getCommentId()
+ void setCommentId(Long)
+ Long getUserId()
+ void setUserId(Long)
+ String getAction()
+ void setAction(String)
+ String getOldValue()
+ void setOldValue(String)
+ String getNewValue()
+ void setNewValue(String)
+ Instant getTimestamp()
+ void setTimestamp(Instant)
}


class com.codelogium.ticketing.service.CommentServiceImp {
- CommentRepository commentRepository
- TicketRepository ticketRepository
- AuditLogRepository auditLogRepository
- UserRepository userRepository
+ Comment createComment(Long,Long,Comment)
+ Comment updateComment(Long,Long,Long,Comment)
+ Comment retrieveComment(Long,Long,Long)
+ List<AuditLog> retrieveAuditLogs(Long,Long,Long)
+ void removeComment(Long,Long,Long)
- void validateUser(Long)
+ {static} Comment unwrapComment(Long,Optional<Comment>)
}


class com.codelogium.ticketing.dto.UserReferenceDTO {
- Long id
- String username
+ Long getId()
+ void setId(Long)
+ String getUsername()
+ void setUsername(String)
}


class com.codelogium.ticketing.dto.UserRoomDTO {
- Long id
- RoomDTO room
+ Long getId()
+ void setId(Long)
+ RoomDTO getRoom()
+ void setRoom(RoomDTO)
}


class com.codelogium.ticketing.api.TicketController {
- TicketService ticketService
- TicketMapper ticketMapper
+ ResponseEntity<String> createTicket(Long,TicketCreationRequest)
+ ResponseEntity<TicketDTO> retrieveTicket(Long,Long)
+ ResponseEntity<Ticket> updateTicketInfo(Long,Long,TicketInfoUpdateDTO)
+ ResponseEntity<Ticket> updateTicketStatus(Long,Long,TicketStatusUpdateDTO)
+ ResponseEntity<List<Ticket>> retrieveTicketsByCreator(Long)
+ ResponseEntity<Ticket> searchByIdAndStatus(Long,Long,Status)
+ ResponseEntity<List<AuditLog>> retrieveAuditLogs(Long)
+ ResponseEntity<Void> removeTicket(Long,Long)
}


interface com.codelogium.ticketing.repository.TicketRepository {
~ Optional<Ticket> findByIdAndCreatorId(Long,Long)
~ List<Ticket> findByCreatorId(Long)
~ Optional<User> findCreatorByTicket(Long)
~ Optional<Ticket> findByTicketIdAndStatus(Long,Status)
}

class com.codelogium.ticketing.config.OpenAPIConfing {
+ OpenAPI defineOpenAPI()
}

enum com.codelogium.ticketing.entity.enums.Status {
+  NEW
+  IN_PROGRESS
+  RESOLVED
}

class com.codelogium.ticketing.config.WebClientConfig {
- String serverPort
+ WebClient webClient(WebClient.Builder)
}


class com.codelogium.ticketing.service.UserServiceImp {
- UserRepository userRepository
- BCryptPasswordEncoder bCryptPasswordEncoder
- RoomRepository roomRepository
- UserRoomRepository userRoomRepository
+ User createUser(User,String)
+ User retrieveUser(Long)
+ User retrieveUser(String)
+ void removeUser(Long)
+ void validateUserExists(Long)
+ {static} User unwrapUser(Long,Optional<User>)
}


class com.codelogium.ticketing.TicketingApplication {
+ {static} void main(String[])
+ BCryptPasswordEncoder bCryptPasswordEncoder()
}

interface com.codelogium.ticketing.service.UserService {
~ User createUser(User,String)
~ User retrieveUser(Long)
~ User retrieveUser(String)
~ void removeUser(Long)
}

class com.codelogium.ticketing.api.CommentController {
- CommentService commentService
+ ResponseEntity<Comment> createComment(Long,Long,Comment)
+ ResponseEntity<Comment> updateComment(Long,Long,Long,Comment)
+ ResponseEntity<Comment> retrieveComment(Long,Long,Long)
+ ResponseEntity<List<AuditLog>> retrieveAuditLogs(Long,Long,Long)
+ ResponseEntity<Void> removeComment(Long,Long,Long)
}


class com.codelogium.ticketing.security.rbac.CustomUserDetailsServiceImp {
- UserRepository userRepository
+ UserDetails loadUserByUsername(String)
}


enum com.codelogium.ticketing.entity.enums.Category {
+  MAINTENANCE
+  CLEANING
+  INTERNET
+  SECURITY
+  NOISE
+  OTHER
}

class com.codelogium.ticketing.config.DataInitializer {
- RoomRepository roomRepository
- RoomDetailsRepository roomDetailsRepository
- UserRepository userRepository
- BCryptPasswordEncoder bCryptPasswordEncoder
- UserRoomRepository userRoomRepository
- UserService userService
+ void init()
}


class com.codelogium.ticketing.entity.Ticket {
- Long id
- String title
- String description
- Instant creationDate
- Status status
- Category category
- Priority priority
- User creator
- List<Comment> comments
- String imageUrl
- Set<TicketRoom> roomAssociations
+ Long getId()
+ void setId(Long)
+ String getTitle()
+ void setTitle(String)
+ String getDescription()
+ void setDescription(String)
+ Instant getCreationDate()
+ void setCreationDate(Instant)
+ Status getStatus()
+ void setStatus(Status)
+ Category getCategory()
+ void setCategory(Category)
+ Priority getPriority()
+ void setPriority(Priority)
+ User getCreator()
+ void setCreator(User)
+ List<Comment> getComments()
+ void setComments(List<Comment>)
+ String getImageUrl()
+ void setImageUrl(String)
+ Set<TicketRoom> getRoomAssociations()
+ void setRoomAssociations(Set<TicketRoom>)
}


class com.codelogium.ticketing.dto.AuthResponse {
- String token
+ String getToken()
+ void setToken(String)
}


class com.codelogium.ticketing.security.manager.CustomAuthenticationManager {
- CustomUserDetailsServiceImp customUserDetailsServiceImp
- BCryptPasswordEncoder bCryptPasswordEncoder
+ Authentication authenticate(Authentication)
}


class com.codelogium.ticketing.security.handler.CustomAccessDeniedHandler {
+ void handle(HttpServletRequest,HttpServletResponse,AccessDeniedException)
}

class com.codelogium.ticketing.dto.TicketDTO {
- Long id
- String title
- String description
- String imageUrl
- Instant creationDate
- Status status
- Category category
- Priority priority
- UserDTO creator
- List<CommentDTO> comments
- List<TicketRoomDTO> roomAssociations
- String roomNumbersString
+ Long getId()
+ void setId(Long)
+ String getTitle()
+ void setTitle(String)
+ String getDescription()
+ void setDescription(String)
+ String getImageUrl()
+ void setImageUrl(String)
+ Instant getCreationDate()
+ void setCreationDate(Instant)
+ Status getStatus()
+ void setStatus(Status)
+ Category getCategory()
+ void setCategory(Category)
+ Priority getPriority()
+ void setPriority(Priority)
+ UserDTO getCreator()
+ void setCreator(UserDTO)
+ List<CommentDTO> getComments()
+ void setComments(List<CommentDTO>)
+ List<TicketRoomDTO> getRoomAssociations()
+ void setRoomAssociations(List<TicketRoomDTO>)
+ String getRoomNumbersString()
}


class com.codelogium.ticketing.service.FileStorageServiceImp {
+ String uploadImageFromBase64(String)
}

class com.codelogium.ticketing.entity.Comment {
- Long id
- String content
- Instant createdAt
- Ticket ticket
- User author
+ Long getId()
+ void setId(Long)
+ String getContent()
+ void setContent(String)
+ Instant getCreatedAt()
+ void setCreatedAt(Instant)
+ Ticket getTicket()
+ void setTicket(Ticket)
+ User getAuthor()
+ void setAuthor(User)
}


class com.codelogium.ticketing.exception.ErrorResponse {
- Instant timestamp
- List<String> messages
}

class com.codelogium.ticketing.dto.LoginRequest {
- String username
- String password
+ String getUsername()
+ void setUsername(String)
+ String getPassword()
+ void setPassword(String)
}


interface com.codelogium.ticketing.service.UserRoomService {
~ List<Room> retrieveRooms(Long)
}



org.springframework.data.jpa.repository.JpaRepository <|-- com.codelogium.ticketing.repository.RoomDetailsRepository
com.codelogium.ticketing.service.UserRoomService <|.. com.codelogium.ticketing.service.UserRoomServiceImp
org.springframework.data.jpa.repository.JpaRepository <|-- com.codelogium.ticketing.repository.TicketRoomRepository
com.codelogium.ticketing.exception.RuntimeException <|-- com.codelogium.ticketing.exception.ResourceNotFoundException
org.springframework.data.jpa.repository.JpaRepository <|-- com.codelogium.ticketing.repository.RoomRepository
org.springframework.data.jpa.repository.JpaRepository <|-- com.codelogium.ticketing.repository.UserRoomRepository
org.springframework.web.filter.OncePerRequestFilter <|-- com.codelogium.ticketing.security.filter.ExceptionHandlerFilter
org.springframework.data.jpa.repository.JpaRepository <|-- com.codelogium.ticketing.repository.AuditLogRepository
org.springframework.data.jpa.repository.JpaRepository <|-- com.codelogium.ticketing.repository.UserRepository
org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler <|-- com.codelogium.ticketing.ApplicationExceptionHandler
org.springframework.security.web.AuthenticationEntryPoint <|.. com.codelogium.ticketing.security.handler.CustomAuthenticationEntryPoint
org.springframework.data.jpa.repository.JpaRepository <|-- com.codelogium.ticketing.repository.CommentRepository
com.codelogium.ticketing.service.TicketService <|.. com.codelogium.ticketing.service.TicketServiceImp
org.springframework.security.core.userdetails.UserDetails <|.. com.codelogium.ticketing.security.rbac.CustomUserDetailsImp
org.springframework.web.filter.OncePerRequestFilter <|-- com.codelogium.ticketing.security.filter.JWTAuthorizationFilter
org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter <|-- com.codelogium.ticketing.security.filter.AuthenticationFilter
com.codelogium.ticketing.service.CommentService <|.. com.codelogium.ticketing.service.CommentServiceImp
org.springframework.data.jpa.repository.JpaRepository <|-- com.codelogium.ticketing.repository.TicketRepository
com.codelogium.ticketing.service.UserService <|.. com.codelogium.ticketing.service.UserServiceImp
org.springframework.security.core.userdetails.UserDetailsService <|.. com.codelogium.ticketing.security.rbac.CustomUserDetailsServiceImp
org.springframework.security.authentication.AuthenticationManager <|.. com.codelogium.ticketing.security.manager.CustomAuthenticationManager
org.springframework.security.web.access.AccessDeniedHandler <|.. com.codelogium.ticketing.security.handler.CustomAccessDeniedHandler
com.codelogium.ticketing.service.FileStorageService <|.. com.codelogium.ticketing.service.FileStorageServiceImp
@enduml